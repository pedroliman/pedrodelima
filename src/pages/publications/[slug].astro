---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getAugmentedPublications } from '../../data/publication-provider';
import type { Publication } from '../../data/publications';
import { slugify } from '../../utils/common-utils';
import { formatAuthorsForPublication } from '../../utils/publication-utils';
import { cleanBibtexForDisplay } from '../../utils/bibtex-utils';
import RelatedTalks from '../../components/RelatedTalks.astro';
import talks from '../../data/talks';

export async function getStaticPaths() {
  const publications = await getAugmentedPublications();
  return publications.map(pub => ({
    params: { slug: slugify(pub.id) },
  }));
}

const { slug } = Astro.params;
const publications = await getAugmentedPublications();
const publication = publications.find(p => slugify(p.id) === slug);

// Check if there are related talks for this publication
const hasRelatedTalks = publication ? talks.some(talk => talk.relatedPublicationIds && talk.relatedPublicationIds.includes(publication.id)) : false;

if (!publication) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found'
  });
}

const pageTitle = publication.title;
const cleanedBibtex = publication.bibtex ? cleanBibtexForDisplay(publication.bibtex) : null;

import siteConfig from '../../data/site-config';
---

<BaseLayout title={pageTitle} description={publication.abstract || ''}>
  <article class="mb-16 sm:mb-20">
    <h1 class="text-3xl leading-tight font-serif font-medium sm:text-4xl sm:leading-tight mb-8">
      {(publication.url || publication.doi) ? (
        <a
          href={publication.url || `https://doi.org/${publication.doi}`}
          target="_blank"
          rel="noopener noreferrer"
          class="text-main hover:text-main/80 transition-colors inline-flex items-center gap-2"
        >
          {publication.title}
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="shrink-0">
            <path d="M7 17L17 7"></path>
            <path d="M7 7h10v10"></path>
          </svg>
        </a>
      ) : (
        publication.title
      )}
    </h1>

    {publication.authors && (
      <section class="mb-6">
        <p class="text-lg text-main/80">{formatAuthorsForPublication(publication.authors)}</p>
      </section>
    )}

    <div id="citation-placeholder"></div>

    {publication.abstract && (
      <section class="mb-8">
        <h2 class="text-xl font-medium mb-4">Abstract</h2>
        <p class="text-lg leading-relaxed text-main/85">{publication.abstract}</p>
      </section>
    )}


    {/* Code Repository section */}
    {publication.code && (
      <section class="mt-8">
        <h2 class="text-xl font-medium mb-4">Code Repository</h2>
        <a href={publication.code} class="text-lg font-medium text-green-600 hover:underline" target="_blank" rel="noopener noreferrer">
          View Source Code â†’
        </a>
      </section>
    )}

    {/* Related Talks section */}
    {hasRelatedTalks && (
      <section class="mt-8">
        <h2 class="text-xl font-medium mb-4">Related Talks</h2>
        <RelatedTalks publicationId={publication.id} />
      </section>
    )}

    {/* Publication Impact Statistics section */}
    {publication.doi && (
      <section class="mt-8">
        <h2 class="text-xl font-medium mb-4">Publication Impact Statistics</h2>
        <div class="flex items-center gap-4">
          <span
            class="__dimensions_badge_embed__"
            data-doi={publication.doi}
            data-hide-zero-citations="true"
            data-style="small_circle"
          />
          <div class="altmetric-container" data-loaded>
            <span class="altmetric-embed" data-doi={publication.doi} data-badge-type="donut" />
          </div>
        </div>
      </section>
    )}

    {/* Tags section */}
    {publication.tags && publication.tags.length > 0 && (
      <section class="mt-8">
        <h2 class="text-xl font-medium mb-4">Topics</h2>
        <div class="flex flex-wrap gap-2">
          {publication.tags.map((tag) => (
            <a
              href={`/tags/${slugify(tag)}`}
              class="inline-block px-3 py-1.5 text-sm bg-main/10 text-main/80 rounded-md hover:bg-main/20 transition-colors"
            >
              {tag}
            </a>
          ))}
        </div>
      </section>
    )}

    {cleanedBibtex && (
      <section class="mt-8">
        <h2>Citation</h2>
        <div class="flex gap-4">
          <button id="copy-bibtex" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">Copy BibTeX</button>
          <button id="download-bibtex" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">Download .bib</button>
        </div>
        <pre class="mt-4 p-4 bg-gray-100 rounded overflow-x-auto"><code>{cleanedBibtex}</code></pre>
      </section>
    )}

  </article>

  <script is:inline src="https://cdn.jsdelivr.net/npm/citation-js@0.7.20/build/citation.js"></script>
  <script is:inline type="text/javascript" src="https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js"></script>
  <script is:inline type="text/javascript" src="https://badge.dimensions.ai/badge.js"></script>

  <script define:vars={{ bibtex: cleanedBibtex, title: publication.title, citationStyle: siteConfig.citationStyle }}>
    document.addEventListener('DOMContentLoaded', function() {
      // Format citation if bibtex is available
      if (bibtex && window.Cite) {
        try {
          const citation = new window.Cite(bibtex);
          const formatted = citation.format('bibliography', {
            format: 'html',
            template: citationStyle || 'apa',
            lang: 'en-US'
          });
          const placeholder = document.getElementById('citation-placeholder');
          if (placeholder) {
            placeholder.innerHTML = formatted;
          }
        } catch (error) {
          console.error('Error formatting citation:', error);
        }
      }

      // Copy BibTeX functionality
      const copyBtn = document.getElementById('copy-bibtex');
      if (copyBtn && bibtex) {
        copyBtn.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(bibtex);
            // Show success feedback
            const originalText = copyBtn.textContent;
            copyBtn.textContent = 'Copied!';
            copyBtn.classList.add('bg-green-200');
            setTimeout(() => {
              copyBtn.textContent = originalText;
              copyBtn.classList.remove('bg-green-200');
            }, 2000);
          } catch (error) {
            console.error('Failed to copy BibTeX:', error);
            alert('Failed to copy BibTeX. Please select and copy manually.');
          }
        });
      }

      // Download BibTeX functionality
      const downloadBtn = document.getElementById('download-bibtex');
      if (downloadBtn && bibtex) {
        downloadBtn.addEventListener('click', () => {
          try {
            const blob = new Blob([bibtex], { type: 'application/x-bibtex' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${title.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_-]/g, '')}.bib`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          } catch (error) {
            console.error('Failed to download BibTeX:', error);
            alert('Failed to download BibTeX.');
          }
        });
      }
    });
  </script>
</BaseLayout>
